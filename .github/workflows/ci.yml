name: Rust CI/CD

on:
  push:
    branches:
      - master
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches:
      - master
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always  # Ustawienie koloru dla terminala

jobs:
  build:
    runs-on: ubuntu-latest  # Wybór systemu operacyjnego

    strategy:
      matrix:
        rust-version: [stable, 1.66.0]  # Testowanie na różnych wersjach Rust

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Pobranie repozytorium

      - name: Set up Rust
        uses: actions-rs/toolchain@v1  # Instalacja Rust
        with:
          toolchain: ${{ matrix.rust-version }}  # Wybór wersji Rust
          components: clippy, rustfmt  # Dodatkowe komponenty Rust
          override: true  # Nadpisanie ustawienia Rust na wybraną wersję

      - name: Cache Cargo registry and build
        uses: actions/cache@v3  # Caching Cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}  # Klucz cache
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build project
        run: cargo build --release --verbose  # Kompilacja projektu w trybie release

      - name: Run tests
        run: cargo test --verbose  # Uruchomienie testów jednostkowych

      - name: Run Clippy (Rust linter)
        run: cargo clippy -- -D warnings  # Uruchomienie Clippy i traktowanie ostrzeżeń jako błędów

      - name: Format code with Rustfmt
        run: cargo fmt -- --check  # Sprawdzanie formatowania kodu

      - name: Upload build artifacts
        if: success()  # Przesyłanie artefaktów, jeśli build zakończył się sukcesem
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts  # Nazwa artefaktów
          path: target/release/  # Ścieżka do artefaktów

      - name: Create GitHub release
        if: success() && github.ref == 'refs/heads/master'  # Tworzenie wydania, jeśli build jest udany
        run: |
          git tag -a v${{ github.run_number }} -m "Release version ${{ github.run_number }}"
          git push origin v${{ github.run_number }}  # Pushowanie tagu wersji do repozytorium
